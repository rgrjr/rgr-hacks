;;; rude hacks for rude software.
;;;
;;;    Modification history:
;;;
;;; created.  -- rgr, 18-Apr-01.
;;; new table-driven rgr-fix-word-headings fn, get rid of <v:shape> stuff
;;;	because that wrecks Netscape's layout computation.  -- rgr, 23-Apr-01.
;;; rgr-msw-flush-shape-stuff: new fn, generalized.  -- rgr, 1-May-01.
;;; allow for \240 in emailed html.  -- rgr, 13-Jun-01.
;;;

(defvar rgr-msw-broken-title-rewrite-rules
	(let ((any-span "\\(</?span[^>]*>\\)")
	      (end-span "\\(</span>\\)")
	      (whitespace "[ \t\n]"))
	  (list (cons (concat "<!\\[if !supportLists]>"
			      any-span "*\\([0-9.]+\\(&nbsp; *\\)\\)"
			      end-span "*<!\\[endif]>")
		      "\\2")
		'("<!--\\[if [^]>]+\\]>[ \t\n]*<!\\[endif\\]-->[ \t\n]*"
		  . "")
		'("\\(<h[0-9]>\\)\\(<a name=\"[^>]+\">\\)\\(</a>\\)?"
		  . "\\2\n\\1")
		;; these seem to be mostly bullshit.
		(cons (concat "<span" whitespace "+style=\"mso-spacerun:"
			      whitespace "yes\">\\(\240\\|&nbsp;\\)+"
			      whitespace "*</span>")
		      " ")
		;; this appears in img tags.
		'(" v:shapes=\"[a-zA-Z0-9_]+\" *" . " ")
		;; put this general span-killer last.
		(cons (concat any-span "\\(\240\\|&nbsp;\\)+\n*" end-span)
		      "&nbsp; ")))
  "Alist of (pattern . replacement) for fixing HTML generated by MS Word.")

(defun rgr-fix-word-headings (&optional rewrite-rules)
  ;; Flush things that break headings.  Also called by rgr-fix-ms-word (below).
  (interactive)
  (let ((silent-p (null rewrite-rules))
	(rules (or rewrite-rules
		   rgr-msw-broken-title-rewrite-rules))
	(n-things-fixed 0)
	(last-pass-succeeded-p t))
    (save-excursion
      (while last-pass-succeeded-p
	(let ((this-p nil)
	      (tail rules))
	  (while tail
	    (let* ((pair (car tail))
		   (regexp (car pair))
		   (replacement (cdr pair)))
	      (goto-char (point-min))
	      (while (re-search-forward regexp nil t)
		(replace-match replacement)
		(setq this-p t)
		(setq n-things-fixed (1+ n-things-fixed))))
	    (setq tail (cdr tail)))
	  (setq last-pass-succeeded-p this-p))))
    (or silent-p
	(message "%d replacements." n-things-fixed))
    n-things-fixed))

(defun rgr-msw-flush-shape-stuff ()
  (interactive)
  (let ((fix-count 0))
    (goto-char (point-min))
    ;; this re handles both v:shape and v:shapetype.  -- rgr, 1-May-01.
    (while (re-search-forward "<v:shape[a-z]*[ \t\n][^>]*>[ \t\n]*" nil t)
      (replace-match "")
      (let ((last-match ""))
	(while (and (not (equal last-match "</v:shape>"))
		    (looking-at "</?[ov]:[^>]*>"))
	  (setq last-match (match-string 0));; before replace mungs it.
	  (replace-match "")
	  ;; this whitespace will get consolidated later.
	  (skip-chars-forward " \t\n"))
	(setq fix-count (1+ fix-count))))
    fix-count))

(defun rgr-fix-ms-word ()
  (interactive)
  (let ((n-empty-paras 0) (n-empty-markup 0) (other-fixes 0))
    (save-excursion
      (goto-char (point-min))
      (while (search-forward "<![if !supportEmptyParas]>&nbsp;<![endif]>" nil t)
	;; this is like "M-h C-w" (mark-paragraph, kill-region).
	;; [unfortunately, it sometimes kills useful stuff.  -- rgr, 18-Apr-01.]
	'(delete-region (progn (backward-paragraph 1)
			      (point))
		       (progn (forward-paragraph 1)
			      (point)))
	(replace-match "")
	(setq n-empty-paras (1+ n-empty-paras)))
      ;; Do multiple passes of removing markup.
      (let ((last-pass-succeeded-p t))
	(while last-pass-succeeded-p
	  (let ((this-p nil))
	    (goto-char (point-min))
	    (while (re-search-forward "<\\([a-z0-9:]+\\)\\>[^>]*>[ \t\n]*</\\1>"
				      nil t)
	      ;; flush only if not an "a" tag (which might be <a name=...>).
	      (cond ((not (equal (match-string 1) "a"))
		      (replace-match "")
		      (setq this-p t)
		      (setq n-empty-markup (1+ n-empty-markup)))))
	    (setq last-pass-succeeded-p this-p))))
      ;; Get rid of things that confuse Netscape.
      (setq other-fixes (rgr-msw-flush-shape-stuff))
      ;; Get rid of things that confuse C-h t.
      (setq other-fixes
	    (+ (rgr-fix-word-headings rgr-msw-broken-title-rewrite-rules)
	       other-fixes))
      ;; Finally, clean up redundant whitespace lines.
      (goto-char (point-min))
      (while (re-search-forward "\n[ \t]*\n[ \t]*\n[ \t\n]*" nil t)
	(replace-match "\n\n")
	(setq other-fixes (1+ other-fixes)))
      (message "Fixed %d empty paragraphs, %d empty tags, and %d others."
	       n-empty-paras n-empty-markup other-fixes))))
